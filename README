# Tree - Directory Listing Utility

## Overview

`tree` is a recursive directory listing program that produces a depth-indented listing of files. With no arguments, `tree` lists the files in the current directory. When directory arguments are given, `tree` lists all the files and/or directories found in the given directories each in turn. `tree` then returns the total number of files and/or directories listed.

There are options to change the characters used in the output, and to use color output. Graphical options are also provided to change the type of indentation lines. Various other options exist to modify the output, including filtering, sorting, and output formats like XML, JSON, HTML, and Markdown.

## Version

**Version:** v2.2.1 (1996 - 2024)

## Authors

- Steve Baker (steve.baker.llc@gmail.com)
- Thomas Moore
- Francesc Rocher (HTML output)
- Florian Sesser (JSON output)
- Kyosuke Tokoro (Charsets / OS/2 support)

## License

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

## Features

- **Recursive Directory Listing:** Displays directory contents in a tree-like format.
- **Flexible Output:**
  - Supports plain text, XML, JSON, HTML, and Markdown output.
  - Customizable character sets and indentation graphics.
  - Colorized output based on file type.
- **Filtering:**
  - Include or exclude files based on patterns.
  - Support for `.gitignore` files.
  - Limit recursion depth and number of files per directory.
- **File Information:**
  - Display file permissions, owner, group, size, inode, device ID, and modification/status change times.
  - Human-readable file sizes (including SI units).
  - Compute directory sizes based on their contents.
  - Word count for files (directory word count is 0).
- **Sorting:**
  - Sort by name, version, size, modification time, or status change time.
  - Reverse sort order.
  - Option to list directories before or after files.
- **Symlink Handling:**
  - Option to follow symbolic links.
- **Input Options:**
  - Read paths from files instead of command-line arguments.
- **Hyperlinks:**
  - Generate OSC 8 terminal hyperlinks.

## Building from Source

To build `tree` from source, you typically need a C compiler (like GCC) and the `make` utility. Navigate to the source directory and run:

```bash
make
```

This will usually compile the source files and produce an executable named `tree`. You can then move this executable to a directory in your system's `PATH` (e.g., `/usr/local/bin`).

### Local Installation

To install `tree` locally (e.g., in `~/.local/bin`), you can use the `PREFIX` variable during the build and installation process:

```sh
make PREFIX=$HOME/.local
make install PREFIX=$HOME/.local
```

This will install the `tree` executable to `$HOME/.local/bin/tree` and its man page to `$HOME/.local/share/man/man1/tree.1` or `$HOME/.local/man/man1/tree.1`. Ensure that `$HOME/.local/bin` is in your system's `PATH` to run `tree` directly.

### Uninstallation

To uninstall `tree` if you installed it locally using the `PREFIX` method:

```sh
rm -f $HOME/.local/bin/tree
rm -f $HOME/.local/share/man/man1/tree.1
rm -f $HOME/.local/man/man1/tree.1 # On some systems
make clean # To remove compiled files from the source directory
```

## Usage

```bash
tree [OPTIONS] [directory ...]
```

If no directory is specified, `tree` will list the contents of the current directory.

## Options

Below is a comprehensive list of command-line options available for `tree`:

### Listing options

- `-a` All files are listed.
- `-d` List directories only.
- `-l` Follow symbolic links like directories.
- `-f` Print the full path prefix for each file.
- `-x` Stay on current filesystem only.
- `-L level` Descend only `level` directories deep.
- `-R` Rerun tree when max dir level reached.
- `-P pattern` List only those files that match the pattern given.
- `-I pattern` Do not list files that match the given pattern.
- `--gitignore` Filter by using `.gitignore` files.
- `--gitfile X` Explicitly read a gitignore file `X`.
- `--ignore-case` Ignore case when pattern matching.
- `--matchdirs` Include directory names in `-P` pattern matching.
- `--metafirst` Print meta-data at the beginning of each line.
- `--prune` Prune empty directories from the output.
- `--info` Print information about files found in `.info` files.
- `--infofile X` Explicitly read info file `X`.
- `--noreport` Turn off file/directory count at end of tree listing.
- `--charset X` Use charset `X` for terminal/HTML and indentation line output.
- `--filelimit #` Do not descend dirs with more than `#` files in them.
- `-o filename` Output to file instead of stdout.

### File options

- `-q` Print non-printable characters as `?`.
- `-N` Print non-printable characters as is.
- `-Q` Quote filenames with double quotes.
- `-p` Print the protections for each file.
- `-u` Displays file owner or UID number.
- `-g` Displays file group owner or GID number.
- `-s` Print the size in bytes of each file.
- `-h` Print the size in a more human readable way.
- `--si` Like `-h`, but use in SI units (powers of 1000).
- `--du` Compute size of directories by their contents.
- `-w` Print the word count for files. For directories, the word count is 0. For files, it attempts to process text files and heuristically skips binary files.
- `-D` Print the date of last modification or (`-c`) status change.
- `--timefmt fmt` Print and format time according to the format `fmt`.
- `-F` Appends `/`, `=`, `*`, `@`, `|` or `>` as per `ls -F`.
- `--inodes` Print inode number of each file.
- `--device` Print device ID number to which each file belongs.

### Sorting options

- `-v` Sort files alphanumerically by version.
- `-t` Sort files by last modification time.
- `-c` Sort files by last status change time.
- `-U` Leave files unsorted.
- `-r` Reverse the order of the sort.
- `--dirsfirst` List directories before files (`-U` disables).
- `--filesfirst` List files before directories (`-U` disables).
- `--sort X` Select sort: `name`, `version`, `size`, `mtime`, `ctime`, `none`.

### Graphics options

- `-i` Don't print indentation lines.
- `-A` Print ANSI lines graphic indentation lines.
- `-S` Print with CP437 (console) graphics indentation lines.
- `-n` Turn colorization off always (`-C` overrides).
- `-C` Turn colorization on always.

### XML/HTML/JSON/Markdown/Hyperlink options

- `-X` Prints out an XML representation of the tree.
- `-J` Prints out an JSON representation of the tree.
- `-M` Prints out a Markdown bullet list representation of the tree.
- `-H baseHREF` Prints out HTML format with `baseHREF` as top directory.
  - If `baseHREF` is `-`, the HTML output will use relative paths.
- `-T string` Replace the default HTML title and H1 header with `string`.
- `--nolinks` Turn off hyperlinks in HTML output.
- `--hintro X` Use file `X` as the HTML intro.
- `--houtro X` Use file `X` as the HTML outro.
- `--hyperlink` Turn on OSC 8 terminal hyperlinks.
- `--scheme X` Set OSC 8 hyperlink scheme, default `file://`.
- `--authority X` Set OSC 8 hyperlink authority/hostname.

### Input options

- `--fromfile` Reads paths from files (`.`=stdin).
- `--fromtabfile` Reads trees from tab indented files (`.`=stdin).
- `--fflinks` Process link information when using `--fromfile`.

### Miscellaneous options

- `--opt-toggle` Enable option toggling (allows re-specifying an option to toggle its boolean value).
- `--version` Print version and exit.
- `--help` Print usage and this help message and exit.
- `--` Options processing terminator. Any arguments following `--` are treated as directory names, even if they start with a dash.

## Examples

1.  **List current directory:**

    ```bash
    tree
    ```

2.  **List a specific directory up to 2 levels deep:**

    ```bash
    tree -L 2 /path/to/directory
    ```

3.  **List directories only, showing permissions and sizes:**

    ```bash
    tree -dps /path/to/directory
    ```

4.  **List all files, including hidden ones, and output to HTML:**

    ```bash
    tree -a -H . -o tree_report.html /path/to/directory
    ```

    (This creates `tree_report.html` with `.` as the base HREFs for links.)

5.  **List files matching a pattern, ignoring case, and sort by modification time:**

    ```bash
    tree -P "*.txt" --ignore-case -t /path/to/directory
    ```

6.  **Output as JSON:**

    ```bash
    tree -J -o output.json /path/to/directory
    ```

7.  **Use gitignore rules for filtering:**
    ```bash
    tree --gitignore /path/to/git-repository
    ```

## Reporting Bugs / Contributing

If you find any bugs or have suggestions for improvements, please refer to the project's repository or contact the maintainers. Contributions are welcome! (You might want to add a link to your project's issue tracker or contribution guidelines here.)
